service: serverless-offline-sqs

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs18.x

plugins:
  - ../../packages/serverless-offline-sqs
  - serverless-offline

functions:
  myPromiseHandler:
    handler: lambda/handler.promise
    events:
      - sqs: arn:aws:sqs:region:XXXXXX:MyFirstQueue
      - sqs:
          arn: arn:aws:sqs:region:XXXXXX:MySecondQueue
  myCallbackHandler:
    handler: lambda/handler.callback
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - MyThirdQueue
              - Arn
  myLargestBatchSizeHandler:
    handler: lambda/handler.callback
    events:
      - sqs:
          batchSize: 70
          arn:
            Fn::GetAtt:
              - MyLargestBatchSizeQueue
              - Arn
  myPythonHandler:
    runtime: python3.7
    handler: lambda/handler.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - MyFourthQueue
              - Arn

resources:
  Resources:
    MyFirstQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: MyFirstQueue
    MySecondQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: MySecondQueue
    MyThirdQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: MyThirdQueue
    MyFourthQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: MyFourthQueue
    MyLargestBatchSizeQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: MyLargestBatchSizeQueue

custom:
  serverless-offline:
    httpPort: 3333
  serverless-offline-sqs: ${file(./custom.yml):serverless-offline-sqs}
